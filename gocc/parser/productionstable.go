// Code generated by gocc; DO NOT EDIT.

package parser

import "owo/ast"
import "owo/gocc/token"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Declarations	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Declarations : Declaration	<< &ast.Declarations{Text: string(X[0].(*token.Token).Lit)}, nil >>`,
		Id:         "Declarations",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return &ast.Declarations{Text: string(X[0].(*token.Token).Lit)}, nil
		},
	},
	ProdTabEntry{
		String: `Declarations : Declarations Declaration	<< &ast.Declarations{Next: X[0].(*ast.Declarations), Text: string(X[1].(*token.Token).Lit)}, nil >>`,
		Id:         "Declarations",
		NTType:     1,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return &ast.Declarations{Next: X[0].(*ast.Declarations), Text: string(X[1].(*token.Token).Lit)}, nil
		},
	},
	ProdTabEntry{
		String: `Declaration : ident	<< ast.TestIdent(X[0]) >>`,
		Id:         "Declaration",
		NTType:     2,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.TestIdent(X[0])
		},
	},
}
